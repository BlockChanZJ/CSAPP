# phase_1 

Public speaking is very easy.

# phase_2

太菜了做了一个礼拜qwq
关键是搞清楚
+------------+-------------+---------------------------+---------------+
|    Type    |  Form       |   Operand Value           |   Name        |
+------------+-------------+---------------------------+---------------+
| Memory     |Imm(Eb,Ei,s) |M[Imm + R[Eb]+ R[Ei] * s]  |Scaled indexed |
+------------+-------------+---------------------------+---------------+
$esi 存储的是输入的第一个数的地址
也就是-0x18(%ebp),可以确定的是第一个数字为1

然后搞清楚这句话
   0x08048b79 <+49>:	imul   -0x4(%esi,%ebx,4),%eax
   0x08048b7e <+54>:	cmp    %eax,(%esi,%ebx,4)
$ebx 每次+1, $eax = $ebx + 1
所以实际上这句话就是把你输出的前一个数字×$eax倍，和后一个比较
于是就是
1 * 2 = 2 * 3 = 6 * 4 = 24 * 5 = 120 * 6 = 720
答案就是1 2 6 24 120 720

# phase_3
首先 x/s 0x80497de 可以判断输入的是"%d %c %d"
输入的地址分别为-0xc(%ebp) -0x5(%ebp) -0x4(%ebp)
且根据
   0x08048bc9 <+49>:	cmpl   $0x7,-0xc(%ebp)
   0x08048bcd <+53>:	ja     0x8048c88 <phase_3+240>
然后bomb!!
判断出 输入的第一个数字需要 <= 7

根据
   0x08048bd3 <+59>:	mov    -0xc(%ebp),%eax
   0x08048bd6 <+62>:	jmp    *0x80497e8(,%eax,4)
然后x/x *0x80497e8 判断出这是一个switch case跳转，且应该有7个选项
于是我尝试了*(-0xc(%ebp)) = 0的情况
发现第三个数据需要为777，第二个字母需要为113，查询ascii表是q
所以答案为0 q 777

# phase_4
根据
   0x08048cec <+12>:	lea    -0x4(%ebp),%eax

   0x08048d03 <+35>:	cmpl   $0x0,-0x4(%ebp)
   0x08048d07 <+39>:	jg     0x8048d0e <phase_4+46>
可以判断输入的数字放在-0x4(%ebp)中，然后需要大于0

根据这一段
   0x08048d14 <+52>:	push   %eax
   0x08048d15 <+53>:	call   0x8048ca0 <func4>
   0x08048d1a <+58>:	add    $0x10,%esp
   0x08048d1d <+61>:	cmp    $0x37,%eax
   0x08048d20 <+64>:	je     0x8048d27 <phase_4+71>
   0x08048d22 <+66>:	call   0x80494fc <explode_bomb>
   0x08048d27 <+71>:	mov    %ebp,%esp
可以判断func4的返回结果为0x37 = 55, 且$eax中存放的是输入的数字(非地址)
然后看func4这个函数
发现他是一个明显的fibonacci数列，数列的第(输入数)项是55。
于是尝试了10 11 9，发现答案是9

# phase_5

phase_5里面没有显式的输入，但是可以看出是输入一个长度为6的串串
然后通过一系列转换拼凑成"giants"
x/s 0x804980b可以看出

通过这一段发现，它是通过输入的字符然后进行转换，变成"giants"
   0x08048d57 <+43>:	mov    (%edx,%ebx,1),%al
=> 0x08048d5a <+46>:	and    $0xf,%al
   0x08048d5c <+48>:	movsbl %al,%eax
   0x08048d5f <+51>:	mov    (%eax,%esi,1),%al
   0x08048d62 <+54>:	mov    %al,(%edx,%ecx,1)
   0x08048d65 <+57>:	inc    %edx
   0x08048d66 <+58>:	cmp    $0x5,%edx
   0x08048d69 <+61>:	jle    0x8048d57 <phase_5+43>
通过x/s $esi 可以看到
(gdb) x/s $esi
0x804b220:	"isrveawhobpnutfg\260\001"

因此实际上就是把每个输入的字母和0xf做and，得到[0,16)内的数字
然后再赋给新的单词
所以每个字符和0xf的and结果为
15 0 5 11 13 1
所以字母的后四位结尾为这些所以字母可以为
OPEKMA

# phase_6

参考了blog

   0x08048db8 <+32>:	xor    %edi,%edi
   0x08048dba <+34>:	add    $0x10,%esp
   0x08048dbd <+37>:	lea    0x0(%esi),%esi
   0x08048dc0 <+40>:	lea    -0x18(%ebp),%eax
   0x08048dc3 <+43>:	mov    (%eax,%edi,4),%eax
   0x08048dc6 <+46>:	dec    %eax
   0x08048dc7 <+47>:	cmp    $0x5,%eax
   0x08048dca <+50>:	jbe    0x8048dd1 <phase_6+57>
   0x08048dcc <+52>:	call   0x80494fc <explode_bomb>
   0x08048dd1 <+57>:	lea    0x1(%edi),%ebx
   0x08048dd4 <+60>:	cmp    $0x5,%ebx
   0x08048dd7 <+63>:	jg     0x8048dfc <phase_6+100>
   0x08048dd9 <+65>:	lea    0x0(,%edi,4),%eax
   0x08048de0 <+72>:	mov    %eax,-0x38(%ebp)
   0x08048de3 <+75>:	lea    -0x18(%ebp),%esi
   0x08048de6 <+78>:	mov    -0x38(%ebp),%edx
   0x08048de9 <+81>:	mov    (%edx,%esi,1),%eax
   0x08048dec <+84>:	cmp    (%esi,%ebx,4),%eax
   0x08048def <+87>:	jne    0x8048df6 <phase_6+94>
   0x08048df1 <+89>:	call   0x80494fc <explode_bomb>
   0x08048df6 <+94>:	inc    %ebx
   0x08048df7 <+95>:	cmp    $0x5,%ebx
   0x08048dfa <+98>:	jle    0x8048de6 <phase_6+78>
   0x08048dfc <+100>:	inc    %edi
   0x08048dfd <+101>:	cmp    $0x5,%edi
   0x08048e00 <+104>:	jle    0x8048dc0 <phase_6+40>
很显然的判0 和 重复元素

   0x08048e02 <+106>:	xor    %edi,%edi
   0x08048e04 <+108>:	lea    -0x18(%ebp),%ecx
   0x08048e07 <+111>:	lea    -0x30(%ebp),%eax
   0x08048e0a <+114>:	mov    %eax,-0x3c(%ebp)
   0x08048e0d <+117>:	lea    0x0(%esi),%esi
   0x08048e10 <+120>:	mov    -0x34(%ebp),%esi
   0x08048e13 <+123>:	mov    $0x1,%ebx
   0x08048e18 <+128>:	lea    0x0(,%edi,4),%eax
   0x08048e1f <+135>:	mov    %eax,%edx
   0x08048e21 <+137>:	cmp    (%eax,%ecx,1),%ebx
   0x08048e24 <+140>:	jge    0x8048e38 <phase_6+160>
   0x08048e26 <+142>:	mov    (%edx,%ecx,1),%eax
   0x08048e29 <+145>:	lea    0x0(%esi,%eiz,1),%esi
---Type <return> to continue, or q <return> to quit---
   0x08048e30 <+152>:	mov    0x8(%esi),%esi
   0x08048e33 <+155>:	inc    %ebx
   0x08048e34 <+156>:	cmp    %eax,%ebx
   0x08048e36 <+158>:	jl     0x8048e30 <phase_6+152>
   0x08048e38 <+160>:	mov    -0x3c(%ebp),%edx
   0x08048e3b <+163>:	mov    %esi,(%edx,%edi,4)
   0x08048e3e <+166>:	inc    %edi
   0x08048e3f <+167>:	cmp    $0x5,%edi
   0x08048e42 <+170>:	jle    0x8048e10 <phase_6+120>
伪代码如下
    for (int i =0; i<=5; i++){
        for (int j =0; arr[i]> j; j++){
            node = node.next;
        }
        ptr[i]= node;
    }

   0x08048e44 <+172>:	mov    -0x30(%ebp),%esi
   0x08048e47 <+175>:	mov    %esi,-0x34(%ebp)
   0x08048e4a <+178>:	mov    $0x1,%edi
   0x08048e4f <+183>:	lea    -0x30(%ebp),%edx
   0x08048e52 <+186>:	mov    (%edx,%edi,4),%eax
   0x08048e55 <+189>:	mov    %eax,0x8(%esi)
   0x08048e58 <+192>:	mov    %eax,%esi
   0x08048e5a <+194>:	inc    %edi
   0x08048e5b <+195>:	cmp    $0x5,%edi
   0x08048e5e <+198>:	jle    0x8048e52 <phase_6+186>
   0x08048e60 <+200>:	movl   $0x0,0x8(%esi)
   0x08048e67 <+207>:	mov    -0x34(%ebp),%esi
重新串联链表

   0x08048e6a <+210>:	xor    %edi,%edi
   0x08048e6c <+212>:	lea    0x0(%esi,%eiz,1),%esi
   0x08048e70 <+216>:	mov    0x8(%esi),%edx
   0x08048e73 <+219>:	mov    (%esi),%eax
   0x08048e75 <+221>:	cmp    (%edx),%eax
   0x08048e77 <+223>:	jge    0x8048e7e <phase_6+230>
   0x08048e79 <+225>:	call   0x80494fc <explode_bomb>
   0x08048e7e <+230>:	mov    0x8(%esi),%esi
   0x08048e81 <+233>:	inc    %edi
   0x08048e82 <+234>:	cmp    $0x4,%edi
   0x08048e85 <+237>:	jle    0x8048e70 <phase_6+216>
检测链表的值

总结：也就是说，要让第一个元素的值从大到小排列。初始链表元素第一个值从第一到第五分别为：

fd 2d5  12d   3e5  d4   1b0

让其从大到小排列：3e5 2d5 1b0 12d fd d4

对应输入值：4 2 6 3 1 5
